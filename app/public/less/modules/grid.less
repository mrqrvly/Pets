//  LESS MODULE FOR GRID SYSTEM
//  ===========================

@max-width: 1140px;
@min-width: 755px;       //where media query kicks counter-increment
@total-columns: 12;
@gutter: 3%;                //margin

.container {
  padding: 0 20px;
}

.row {
  width: 100%;
  max-width: @max-width;
  min-width: @min-width;
  margin: 0 auto;
  padding: 0.5em 0;
  .clearfix;
}


// Creating columns
.create-columns(@i) when (@i > 0) {     // @i is the iterator. represents column 1 thru 12
  @column-width: (((@max-width * @i) / @total-columns) * 100) / @max-width;
  @missing-width: (@gutter * ((@total-columns / @i) - 1)) / (@total-columns / @i);
  @width: @column-width - @missing-width;

  .col-@{i} {
    display: block;
    position: relative;
    float: left;
    width: @width;
    // margin-right: @gutter;

    &:last-child {
      margin-right: 0;
    }
  }
  .create-columns(@i - 1);   ///invokes the function
}  
.create-columns(@total-columns);


// Clearfix mixin. minin kinda like functions in less. allow you to reuse code in multip places. you cannot use it in css
.clearfix() {
  *zoom:1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}


.push-2 {
    left: calc(100% / 12 * 2);
}

.login {
  text-align: right;
  padding-right: 20px;
  padding-bottom: 10px;
  // border: 1px solid green;

}


.login input {
  margin-top: 1px;
  margin-right: 5px;
  height: 15px;
  width: 100px;
}

.signup {
  text-align: center;
}
.signup input {
  height: 15px;
  width: 200px;
}
nav {
  text-align: right;
  padding-right: 20px;
}
nav ul {
  list-style: none;
}

nav ul li {
  display: inline;
}

.pet-card {
  float: left;
  text-align: center;
}
